# Single-stage build optimized for Railway - using regular slim for faster builds
FROM hexpm/elixir:1.15.7-erlang-26.1.2-debian-bookworm-20231009-slim

# Install system dependencies in a single layer
RUN apt-get update -y && apt-get install -y \
  build-essential \
  git \
  curl \
  locales \
  ca-certificates \
  --no-install-recommends \
  && apt-get clean && rm -rf /var/lib/apt/lists/*

# Set locale
RUN sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8

# Set working directory
WORKDIR /app

# Install hex and rebar
RUN mix local.hex --force && mix local.rebar --force

# Set production environment
ENV MIX_ENV=prod
ENV PHX_SERVER=true

# Copy dependency files first for better Docker layer caching
COPY mix.exs mix.lock ./

# Get production dependencies and compile them
RUN mix deps.get --only prod && mix deps.compile

# Copy source code
COPY . .

# Update dependencies after copying source (fixes heroicons lock issue)
RUN mix deps.get --only prod

# Compile application
RUN mix compile

# Build assets using Mix (esbuild/tailwind, not npm)
RUN mix assets.deploy

# Build release and cleanup
RUN mix release
RUN rm -rf _build/prod/lib/*/priv/static

# Expose port  
EXPOSE 4000

# Create uploads directory
RUN mkdir -p /app/priv/static/uploads

# Create entrypoint script that runs migrations then starts app
RUN echo '#!/bin/bash\nset -e\nmkdir -p /app/priv/static/uploads\n_build/prod/rel/ace_app/bin/ace_app eval "AceApp.Release.migrate()"\nexec _build/prod/rel/ace_app/bin/ace_app start' > /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

# Start with migration
CMD ["/app/entrypoint.sh"]